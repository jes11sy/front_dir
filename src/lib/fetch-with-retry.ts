/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∏
 * –ë–ï–ó–û–ü–ê–°–ù–û: –ù–µ –ª–æ–º–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–∞–µ—Ç
 */

export type NetworkErrorType = 
  | 'NETWORK_ERROR'      // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  | 'TIMEOUT'            // –¢–∞–π–º–∞—É—Ç
  | 'SERVER_ERROR'       // 5xx –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  | 'CLIENT_ERROR'       // 4xx –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  | 'ABORT'              // –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω
  | 'UNKNOWN'            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞

export interface NetworkError extends Error {
  type: NetworkErrorType
  statusCode?: number
  retryable: boolean
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
 */
export function classifyNetworkError(error: any): NetworkError {
  // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏ (–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, DNS –ø—Ä–æ–±–ª–µ–º—ã)
  if (error instanceof TypeError && error.message.includes('fetch')) {
    return {
      ...error,
      type: 'NETWORK_ERROR',
      message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
      retryable: true,
    }
  }

  // –¢–∞–π–º–∞—É—Ç
  if (error.name === 'AbortError' || error.message.includes('timeout')) {
    return {
      ...error,
      type: 'TIMEOUT',
      message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      retryable: true,
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (error.name === 'AbortError') {
    return {
      ...error,
      type: 'ABORT',
      message: '–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω',
      retryable: false,
    }
  }

  // HTTP –æ—à–∏–±–∫–∏
  if (error.statusCode) {
    // 5xx - –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å)
    if (error.statusCode >= 500) {
      return {
        ...error,
        type: 'SERVER_ERROR',
        message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${error.statusCode}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        retryable: true,
      }
    }

    // 4xx - –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å)
    if (error.statusCode >= 400) {
      return {
        ...error,
        type: 'CLIENT_ERROR',
        message: error.message || `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (${error.statusCode})`,
        retryable: false,
      }
    }
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
  return {
    ...error,
    type: 'UNKNOWN',
    message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    retryable: false,
  }
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è retry
 */
export interface RetryOptions {
  maxRetries?: number      // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
  retryDelay?: number      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
  backoff?: boolean        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
  timeout?: number         // –¢–∞–π–º–∞—É—Ç –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30000)
  retryOn?: NetworkErrorType[]  // –ù–∞ –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
}

const DEFAULT_RETRY_OPTIONS: Required<RetryOptions> = {
  maxRetries: 3,
  retryDelay: 1000,
  backoff: true,
  timeout: 30000,
  retryOn: ['NETWORK_ERROR', 'TIMEOUT', 'SERVER_ERROR'],
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å fetch —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * –ë–ï–ó–û–ü–ê–°–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export async function fetchWithRetry(
  url: string,
  options?: RequestInit & { retryOptions?: RetryOptions }
): Promise<Response> {
  const retryOptions = { ...DEFAULT_RETRY_OPTIONS, ...options?.retryOptions }
  const fetchOptions = { ...options }
  delete (fetchOptions as any).retryOptions

  let lastError: NetworkError | null = null
  
  for (let attempt = 0; attempt <= retryOptions.maxRetries; attempt++) {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∫ –∑–∞–ø—Ä–æ—Å—É
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), retryOptions.timeout)
      
      const response = await fetch(url, {
        ...fetchOptions,
        signal: controller.signal,
      })
      
      clearTimeout(timeoutId)
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ (–¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ 4xx/5xx)
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
      return response
      
    } catch (error: any) {
      const networkError = classifyNetworkError(error)
      lastError = networkError
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (attempt === retryOptions.maxRetries) {
        throw networkError
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (!networkError.retryable || !retryOptions.retryOn.includes(networkError.type)) {
        throw networkError
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (—Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      const delay = retryOptions.backoff
        ? retryOptions.retryDelay * Math.pow(2, attempt)
        : retryOptions.retryDelay
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É (—Ç–æ–ª—å–∫–æ –≤ development)
      if (process.env.NODE_ENV === 'development') {
        console.log(
          `üîÑ Retry attempt ${attempt + 1}/${retryOptions.maxRetries} ` +
          `for ${url} after ${delay}ms (error: ${networkError.type})`
        )
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }
  
  // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ TypeScript —Ç—Ä–µ–±—É–µ—Ç
  throw lastError || new Error('Unknown error in fetchWithRetry')
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getUserFriendlyErrorMessage(error: any): string {
  if (!error) return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
  
  const networkError = classifyNetworkError(error)
  
  switch (networkError.type) {
    case 'NETWORK_ERROR':
      return '‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    
    case 'TIMEOUT':
      return '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    
    case 'SERVER_ERROR':
      return 'üîß –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.'
    
    case 'CLIENT_ERROR':
      return networkError.message || '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'
    
    case 'ABORT':
      return '–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω'
    
    default:
      return networkError.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä (ping)
 */
export async function checkServerHealth(baseUrl: string): Promise<boolean> {
  try {
    const response = await fetchWithRetry(`${baseUrl}/health`, {
      method: 'GET',
      retryOptions: {
        maxRetries: 1,
        timeout: 5000,
      },
    })
    return response.ok
  } catch {
    return false
  }
}

